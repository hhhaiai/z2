name: Build and Publish Docker Image

on:
  # 当推送带有 'v' 前缀的标签时触发 (例如 v1.0.0, v2.1.3)
  push:
    tags:
      - 'v*'
  # 允许在 Actions 页面手动触发
  workflow_dispatch:

# 设置环境变量，方便在多个作业中引用
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 作业1: 构建并推送各个架构的独立镜像
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        # 定义要构建的架构平台
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 Git 历史，以便正确解析版本

      - name: Setup QEMU for cross-platform
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Version
        id: version
        run: |
          # 如果是标签推送，则从标签名中提取版本号
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # 如果是手动触发，则使用 'latest'
            VERSION=latest
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # 为每个架构的镜像生成带后缀的标签
          flavor: |
            suffix=-${{ matrix.arch }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=sha,prefix=sha-,format=short

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ startsWith(github.ref, 'refs/tags/v') }} # 仅在推送标签时上传
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # --- 关键修复：传递 GITHUB_TOKEN 以访问私有 Go 模块 ---
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  # 作业2: 创建并推送多架构清单
  manifest:
    # 需要在 build 作业成功完成后运行
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    # 仅在推送标签时运行此作业
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version for manifest: $VERSION"

      - name: Create Manifest List and Push
        run: |
          # 使用 buildx imagetools 命令将所有架构的镜像合并成一个多架构镜像
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-amd64:${{ steps.version.outputs.version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-arm64:${{ steps.version.outputs.version }} \

      - name: Inspect Manifest
        run: |
          # 检查最终创建的多架构镜像信息
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}